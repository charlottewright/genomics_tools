#!/usr/bin/env python3
import argparse
from operator import mul
#%%
# Functions
def define_orthologs(ortholog_file):
	with open(ortholog_file, 'r') as orthologs:
		orthologs_list = []
		for line in orthologs:
			single_copy = line.split("\t")[0]
			orthologs_list.append(single_copy)
	return(orthologs_list)

def get_orthologs_vs_multi_gene_vs_other_for_taxon(orthologs_file, single_orthologs_list, multi_copy_list, ref_taxon):
	with open(orthologs_file, 'r') as orthologs:
		orthodict, ortholog_genes, multi_copy_genes, other_genes = {}, [], [], []
		for line in orthologs:
			orthoID, seqlist = line.rstrip("\n").split(": ")[0], line.rstrip("\n").split(": ")[1].split(" ") # get list of sequences in orthogroups
			for seq in seqlist: # for every seq
				taxon_id, gene_id = seq.split(".")[0], seq.split(".")[1] # get the tolID and gene name
				if taxon_id == ref_taxon:
					if orthoID in single_orthologs_list: #Â if a singleton
						ortholog_genes.append(gene_id)
					elif orthoID in multi_copy_list:
						multi_copy_genes.append(gene_id)
					else:
						other_genes.append(gene_id)

	return(orthodict,  ortholog_genes, multi_copy_genes,  other_genes)

def get_mappings_between_feature_ids(gff_file):
	gff3_genes, gene2midpos, transcript2gene, cds2transcript = [], {}, {}, {}
	with open(gff_file, 'r') as gff:
		for line in gff:
			if not line.startswith('#'): # ignore lines at start
				cols = line.rstrip("\n").split("\t") # get columns
				if cols[2] == 'gene':
					mid_pos = (int(cols[3]) + int(cols[4]))/2
					gene_id = (cols[8].split(';')[2]).split('=')[1]
					gff3_genes.append(gene_id)
					chr_id = cols[0]
					mid_pos_chr = str(chr_id) + '_' + str(mid_pos)
					gene2midpos[gene_id] = mid_pos_chr #sets gene_id as key
				if cols[2] == 'mRNA':
					gene_id = (cols[8].split(';')[1]).split(':')[1]
					transcript_id = (cols[8].split(';')[0]).split(':')[1]
					transcript2gene[transcript_id] = gene_id
				if cols[2] == 'CDS':
					transcript_id = (cols[8].split(';')[1]).split(':')[1]
					cds_id = (cols[8].split(';')[0]).split(':')[1]
					cds2transcript[cds_id] = transcript_id
	return(gene2midpos, transcript2gene, cds2transcript)

def write_orthology_information(ref_taxon, ortholog_genes, multi_copy_genes, other_genes, gene2midpos, transcript2gene, cds2transcript):
	output_file = str(ref_taxon + '.classified_orthologs.tsv')
	with open(output_file, 'w') as output_file:
		output_file.write(("%s\t%s\t%s\t%s\n") % ("scaffold", "gene_id", "midpos", "orthology_status"))
		for i in other_genes:
			if i in cds2transcript.keys():
				transcript_id = cds2transcript[i]
				gene_id = transcript2gene[transcript_id]
				midpos = gene2midpos[gene_id]
				chr, midpos = midpos.split('_')[0], midpos.split('_')[1]
				output_file.write(("%s\t%s\t%s\t%s\n") % (chr, gene_id, midpos, "other"))
		for i in ortholog_genes:
			if i in cds2transcript.keys():
				transcript_id = cds2transcript[i]
				gene_id = transcript2gene[transcript_id]
				midpos = gene2midpos[gene_id]
				chr, midpos = midpos.split('_')[0], midpos.split('_')[1]
				output_file.write(("%s\t%s\t%s\t%s\n") % (chr, gene_id, midpos, "single_copy"))
		for i in multi_copy_genes:
			if i in cds2transcript.keys():
				transcript_id = cds2transcript[i]
				gene_id = transcript2gene[transcript_id]
				midpos = gene2midpos[gene_id]
				chr, midpos = midpos.split('_')[0], midpos.split('_')[1]
				output_file.write(("%s\t%s\t%s\t%s\n") % (chr, gene_id, midpos, "multi_copy"))
	return()
# %%
# This script takes a list of inferred single copy orthologs (e.g. from get_fuzzy_single_copy_orthologs.py), the full ortholog.txt file and the gff of a given genome
# It then works out for each gene in the gff, is it classified as a single copy ortholog or not (e.g. singletons or multigene family)

if __name__ == "__main__":
	SCRIPT = "categorise_genes_as_single_vs_multicopy.py"
	# argument set up
	parser = argparse.ArgumentParser()
	parser.add_argument("-s", "--single_copy_file", type=str, help = "file listing single copy genes", required=True)
	parser.add_argument("-m", "--multi_copy_file", type=str, help = "file listing multi copy genes", required=True)
	parser.add_argument("-o", "--orthologs_file", type=str, help = "Orthologs.txt generated by OrthoFinder", required=True)
	parser.add_argument("-g", "--gff3_file", type=str, help = "gff3 annotation file for query taxon")
	args = parser.parse_args()
	single_copy_file = args.single_copy_file
	multi_copy_file = args.multi_copy_file
	orthologs_file = args.orthologs_file
	gff_file = args.gff3_file
	# run the functions
	print("[+] Parsing input files for " + gff_file.split('.')[0] + "...")
	ref_taxon = gff_file.split('.')[0] # this relies on the query gff3 file having the naming 'species.xxxx.gff3' where 'species' matches the identifier used in 'Orthologs.tsv'
	single_orthologs_list =  define_orthologs(single_copy_file)
	multi_copy_list = define_orthologs(multi_copy_file)
	orthodict, ortholog_genes, multi_copy_genes, other_genes = get_orthologs_vs_multi_gene_vs_other_for_taxon(orthologs_file, single_orthologs_list, multi_copy_list, ref_taxon)
	gene2midpos, transcript2gene, cds2transcript = get_mappings_between_feature_ids(gff_file)
	print("[+] Writing orthology information per gene to output file.")
	write_orthology_information(ref_taxon, ortholog_genes, multi_copy_genes, other_genes, gene2midpos, transcript2gene, cds2transcript)

exit()
# Manual run

#%%
output_file = 'test_output.tsv'
single_copy_file = 'fuzzy_singletons.20.tsv'
multi_copy_file = 'multi_copy_genes.20.tsv'
gff_file = 'Vanessa_atalanta.relabelled.genes.filtered.gff3'
orthologs_file = 'Orthogroups_without_ilPieNapi4.1.txt'
ref_taxon = 'Vanessa_atalanta'

#%%
ref_taxon = gff_file.split('.')[0] # this relies on the query gff3 file having the naming 'species.xxxx.gff3' where 'species' matches the identifier used in 'Orthologs.tsv'
single_orthologs_list =  define_orthologs(single_copy_file)
multi_copy_list = define_orthologs(multi_copy_file)
orthodict, ortholog_genes, multi_copy_genes, other_genes = get_orthologs_vs_multi_gene_vs_other_for_taxon(orthologs_file, single_orthologs_list, multi_copy_list, ref_taxon)
gene2midpos, transcript2gene, cds2transcript = get_mappings_between_feature_ids(gff_file)

#%%
print("[+] Writing orthology information per gene to output file..")
write_orthology_information(ref_taxon, ortholog_genes, multi_copy_genes, other_genes, gene2midpos, transcript2gene, cds2transcript)

#%%
multi_copy_genes[1:5]
# %%
len(multi_copy_genes)
# %%
for i in multi_copy_genes:
	if i in cds2transcript.keys():
		transcript_id = cds2transcript[i]
		gene_id = transcript2gene[transcript_id]
		midpos = gene2midpos[gene_id]
		chr, midpos = midpos.split('_')[0], midpos.split('_')[1]
		print(chr, midpos)
# %%
